import os
import telebot
from telebot import types
from yandex_music import Client
from configureted.token_bot import token_bot
from configureted.token_bot import yandex_token

bot = telebot.TeleBot(token_bot)
client = Client().init()
# onclient = Client(yandex_token).init()

@bot.message_handler(commands=['start'])
def start(message):
    chat = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    mp1 = types.KeyboardButton('/search')
    mp2 = types.KeyboardButton('/chart')
    mp3 = types.KeyboardButton('/playlist')
    mp4 = types.KeyboardButton('/help')
    markup.add(mp1, mp2, mp3)
    markup.add(mp4)
    bot.send_message(chat, "–ü—Ä–∏–≤–µ—Ç–∏–∫üòÑ! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –ê–ª–∏–Ω–∞\n \n "
                           "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Ç–æ –ø–∏—à–∏ - /help".format(message.from_user), reply_markup=markup)

type_to_name = {
    'track': '—Ç—Ä–µ–∫',
    'artist': '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
    'album': '–∞–ª—å–±–æ–º',
    'playlist': '–ø–ª–µ–π–ª–∏—Å—Ç',
    'video': '–≤–∏–¥–µ–æ',
    'user': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    'podcast': '–ø–æ–¥–∫–∞—Å—Ç',
    'podcast_episode': '—ç–ø–∏–∑–æ–¥ –ø–æ–¥–∫–∞—Å—Ç–∞',
}

@bot.message_handler(commands=['search'])
def post(message):
    chat = message.chat.id

    type_to_name = {
        'track': '—Ç—Ä–µ–∫',
        'artist': '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'album': '–∞–ª—å–±–æ–º',
        'playlist': '–ø–ª–µ–π–ª–∏—Å—Ç',
        'video': '–≤–∏–¥–µ–æ',
        'user': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'podcast': '–ø–æ–¥–∫–∞—Å—Ç',
        'podcast_episode': '—ç–ø–∏–∑–æ–¥ –ø–æ–¥–∫–∞—Å—Ç–∞',
    }

    def send_search_request_and_print_result(query):
        search_result = client.search(query)

        text = [f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}":', '']

        best_result_text = ''
        if search_result.best:
            type_ = search_result.best.type
            best = search_result.best.result

            text.append(bot.send_message(chat, f'‚ùóÔ∏è–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type_to_name.get(type_)}'))

            if type_ in ['track', 'podcast_episode']:
                artists = ''
                if best.artists:
                    artists = ' - ' + ', '.join(artist.name for artist in best.artists)
                best_result_text = best.title + artists
            elif type_ == 'artist':
                best_result_text = best.name
            elif type_ in ['album', 'podcast']:
                best_result_text = best.title
            elif type_ == 'playlist':
                best_result_text = best.title
            elif type_ == 'video':
                best_result_text = f'{best.title} {best.text}'

            text.append(bot.send_message(chat, f'–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {best_result_text}\n'))

        if search_result.artists:
            text.append(bot.send_message(chat, f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {search_result.artists.total}'))
        if search_result.albums:
            text.append(bot.send_message(chat, f'–ê–ª—å–±–æ–º–æ–≤: {search_result.albums.total}'))
        if search_result.tracks:
            text.append(bot.send_message(chat, f'–¢—Ä–µ–∫–æ–≤: {search_result.tracks.total}'))
        if search_result.playlists:
            text.append(bot.send_message(chat, f'–ü–ª–µ–π–ª–∏—Å—Ç–æ–≤: {search_result.playlists.total}'))
        if search_result.videos:
            text.append(bot.send_message(chat, f'–í–∏–¥–µ–æ: {search_result.videos.total}'))

    if message.text == '__main__':
        while True:
            input_query = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: ')
            bot.register_next_step_handler(message, send_search_request_and_print_result)
    else:
        bot.send_message(chat, "–ë–∞–≥! –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥, –∏ –Ω–µ –ø–∏—à–∏—Ç–µ \n/playlist –∏ /search !!")
        bot.register_next_step_handler(message, post)


@bot.message_handler(commands=['chart'])
def charts(message):
    chat = message.chat.id

    CHART_ID = 'world'
    TOKEN = os.environ.get(yandex_token)

    client = Client(TOKEN).init()
    chart = client.chart(CHART_ID).chart

    text = [f'üèÜ {chart.title}', chart.description, '', '–¢—Ä–µ–∫–∏:']

    for track_short in chart.tracks:
        track, chart = track_short.track, track_short.chart
        artists = ''
        if track.artists:
            artists = ' - ' + ', '.join(artist.name for artist in track.artists)

        track_text = f'{track.title}{artists}'

        if chart.progress == 'down':
            track_text = 'üîª ' + track_text
        elif chart.progress == 'up':
            track_text = 'üî∫ ' + track_text
        elif chart.progress == 'new':
            track_text = 'üÜï ' + track_text
        elif chart.position == 1:
            track_text = 'üëë ' + track_text

        track_text = f'{chart.position} {track_text}'
        text.append(track_text)

        msg = bot.send_message(chat, f"{track_text}")
        bot.register_next_step_handler(msg, track)

@bot.message_handler(commands=['playlist'])
def playlist(messages):
    chat = messages.chat.id
    if messages.text == "playlist":
        bot.reply_to(chat, "–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—â—É –ø—Ä–æ—â–µ–Ω–∏—è ")
        bot.register_next_step_handler(messages, playlist)
    else:
        bot.send_message(chat, "–ë–∞–≥! –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥, –∏ –Ω–µ –ø–∏—à–∏—Ç–µ \n/playlist –∏ /search !!")
        bot.register_next_step_handler(messages, playlist)

@bot.message_handler(commands=['help'])
def help(message):
    c = message.chat.id
    inline_markup = types.InlineKeyboardMarkup(row_width=2)
    imp1 = types.InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ãüñã", callback_data='commands')
    imp2 = types.InlineKeyboardButton("FAQüìö", callback_data='faq')
    imp3 = types.InlineKeyboardButton("developerüë®‚Äçüíª", callback_data='dev')
    inline_markup.add(imp1, imp2)
    inline_markup.add(imp3)
    bot.send_message(c, "–í—ã –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏".format(message.from_user), reply_markup=inline_markup)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    try:
        if call.message:
            if call.data == "commands":
                bot.send_message(call.message.chat.id, "–ö–æ–º–∞–Ω–¥—ã:\n \n"
                                                       "* /search - –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n \n"
                                                       "* /chart - –õ—É—á—à–∏–µ –ø–µ—Å–Ω–∏ –ø–æ –º–Ω–µ–Ω–∏—é –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏\n \n"
                                                       "* /playlist - –°–±–æ—Ä–Ω–∏–∫ –ª—É—á—à–∏—Ö –ø–µ—Å–µ–Ω –ø–æ –º–Ω–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                                                       "* /help - –ü–æ–º–æ—â—å –≤ —Å–ª—É—á–∞–π, –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Å—Ç–∏—Ç—É–∞—Ü–∏–π —Å –±–æ—Ç–æ–º ")

        if  call.message:
            if call.data == "faq":
                mep = types.InlineKeyboardMarkup(row_width=1)
                mp1 = types.InlineKeyboardButton("–¶–µ–ª—å –±–æ—Ç–∞", callback_data='bots')
                mep.add(mp1)
                bot.send_message(call.message.chat.id, "FAQ - –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=mep)

        if call.message:
            if call.data == "bots":
                bot.send_message(call.message.chat.id, "–¶–µ–ª—å –±–æ—Ç–∞, –¥–∞—Ä–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º—É–∑—ã–∫—É:)")

        if call.message:
            if call.data == "dev":
                bot.send_message(call.message.chat.id, "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: \n \n telegram: @weronnip \n \n "
                                                       "vk: @weronnip")

    except Exception as e:
        print(repr(e))

bot.polling(none_stop=True, interval=0)